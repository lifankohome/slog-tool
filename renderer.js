// This file is required by the index.html file and will// be executed in the renderer process for that window.// No Node.js APIs are available in this process because// `nodeIntegration` is turned off. Use `preload.js` to// selectively enable features needed in the rendering// process.const {ipcRenderer, shell} = require('electron');const {WebSocket} = require('ws');const fs = require('fs')const app = new Vue({    el: '#app',    data: {        setting: false,        auto_connect: false,        connected: -1,        logs: [            {                time: '^_^',                msg: '欢迎使用 Slog Tool.',                url: '> [www.lifanko.cn]'            }        ],        ws: null,        config: {            server: '',            uuid: '',            save_path: ''        },        statistic: {            launch_time: 0        },        rx: {            cnt: 0,            bytes: 0        },        toast: {            msg: '',            icon: 'none',            timer: null        }    },    methods: {        init() {            console.log('init')            ipcRenderer.send('ready', {                author: 'LEXICA',                version: '1.0.0'            })        },        set_toast(msg, icon, duration) {            if (app.toast.timer !== null) {                clearTimeout(app.toast.timer)            }            app.toast.msg = msg            app.toast.icon = icon            app.toast.timer = setTimeout(function () {                app.toast.timer = null            }, duration)        },        open_url(url) {            if (url === 'about') {                shell.openExternal("https://lifanko.cn/slog/")            } else if (url === 'public') {                shell.openExternal("https://lifanko.cn/slog/public.html")            }        },        toggle_setting() {            console.log('toggle_setting')            app.setting = !app.setting            if (!app.setting) {                ipcRenderer.send('save_config', app.config)            }        },        toggle_connect() {            console.log('toggle_connect')            let that = this            if (app.connected === -1) {                // connecting                app.connected = 0                that.add_log('Connecting to ' + app.config.server)                app.ws = new WebSocket(app.config.server + '?' + (app.config.uuid.replace(' ', '_')));                app.ws.on('error', function err(e) {                    that.add_log(e.message)                });                app.ws.on('open', function open() {                    app.connected = 1;                    that.add_log('Connected!')                    that.set_toast('连接成功', 'success', 1000)                });                app.ws.on('close', function close() {                    app.ws = null                    app.connected = -1;                    that.add_log('Disconnected!')                    that.set_toast('连接断开', 'error', 1000)                });                app.ws.on('message', function message(e) {                    app.rx.cnt++                    app.rx.bytes += e.length                    document.title = 'Slog Tool By LIFANKO' + ' - [RX-Count=' + app.rx.cnt + ', RX-Byte=' + app.rx.bytes + ']'                    let msg = e.toString()                    let msg_type = 'string'                    if (msg.indexOf('type') === -1 || msg.indexOf('obj') === -1) {                        // not standard data, regard as string                        msg = {                            type: "string",                            obj: msg,                            url: 'Unknown URL'                        }                    } else {                        msg = JSON.parse(msg)                        msg_type = msg.type                    }                    if (msg_type === 'string' || msg_type === 'number' || msg_type === 'int' || msg_type === 'text') {                        that.add_log(msg.obj, msg.url + ' - ' + msg_type)                    } else {                        that.add_log(JSON.stringify(msg.obj), msg.url + ' - ' + msg_type)                    }                });            } else {                if (app.ws !== null) {                    app.ws.close()                }                app.connected = -1            }        },        get_time() {            let date = new Date();            let m = date.getMinutes()            m = m > 9 ? m : '0' + m            let s = date.getSeconds()            s = s > 9 ? s : '0' + s            let ms = date.getMilliseconds()            ms = ms > 99 ? ms : (ms > 9 ? '0' + ms : '00' + ms)            return date.getHours() + ':' + m + ':' + s + ':' + ms        },        add_log(msg, url = 'Slog Tool') {            app.logs.unshift({                time: this.get_time(),                msg: msg,                url: '> [' + url + ']'            })            // Add log display limit, avoid too much memory used        },        clear_log() {            app.logs = [{                time: this.get_time(),                msg: 'Cleared',                url: '> [Slog Tool]'            }]        },        save_log() {            let log_buffer = app.logs            let log_num = log_buffer.length            let log_text = ''            for (let i = 0; i < log_num; i++) {                log_text += (i + 1) + app.logs[(log_num - i) - 1].url + '\n'                log_text += app.logs[(log_num - i) - 1].time + app.logs[(log_num - i) - 1].msg + '\n\n'            }            let date = new Date();            let filename = date.getMonth() + '-' + date.getDate() + ' ' + date.getHours() + '_' + date.getMinutes() + '_' + date.getMinutes() + ' ' + date.getMilliseconds()            let save_path = 'C:\\Slog Tool\\' + filename + '.slog'            try {                fs.writeFileSync(save_path, log_text, 'utf8');                this.set_toast('保存成功', 'success', 1000)                shell.showItemInFolder(save_path)            } catch (e) {                this.set_toast('保存失败', 'error', 1000)            }        }, show_log() {            shell.openPath('C:\\Slog Tool').then()        }    }})app.init()ipcRenderer.on('conf', (e, msg) => {    app.config = msg.config    app.statistic = msg.statistic})